!<arch>
0-isupper.c/    0           0     0     644     261       `
#include "main.h"

/**
 * _isupper - A function that checks foe uppercase character
 * @c: It's an integer value
 *
 * Return: 0 if no error
 */

int _isupper(int c)
{
	if (c >= 'A' &&  c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

0-memset.c/     0           0     0     644     363       `
#include "main.h"

/**
 * _memset - Function that fills memory with a n number of byte
 * @s: buffer array
 * @b: constant byte
 * @n: number of bytes of memory area to fill
 *
 * Return: Pointer to memory area `s`
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int count = 0;

	while (count < n)
	{
		s[count] = b;
		count++;
	}

	return (s);
}

0-putchar.c/    0           0     0     644     271       `
#include "main.h"

/**
 * main- This program prints _putchar
 *
 * Return: 0 if no errors
 */
int main(void)
{
	_putchar('_');
	_putchar('p');
	_putchar('u');
	_putchar('t');
	_putchar('c');
	_putchar('h');
	_putchar('a');
	_putchar('r');
	_putchar('\n');
	return (0);
}

0-strcat.c/     0           0     0     644     417       `
#include "main.h"

/**
 * _strcat - Function that concatenates two strings
 * @dest: Variable where string would be concatenated
 * @src: Source variable of string to be concatenated
 *
 * Return: 0 if no error
 */

char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j;

	while (dest[i] != '\0')
	{
		i++;
	}

	for (j = 0; src[j] != '\0'; j++, i++)
	{
		dest[i] = src[j];
	}

	dest[i] = '\0';

	return (dest);
}

100-atoi.c/     0           0     0     644     398       `
#include "main.h"

/**
 * _atoi - convert a string to an integer.
 * @s: the string to be comverted.
 *Return: The integer value of the comverted string.
 */

int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}
1-isdigit.c/    0           0     0     644     254       `
#include "main.h"

/**
 * _isdigit - A function that checks for a digit 0 - 9
 * @c: It's an integer value
 *
 * Return: 0 if no error
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}
1-memcpy.c/     0           0     0     644     371       `
#include "main.h"

/**
 * _memcpy - Function that copies memory area
 * @dest: char array to copy into
 * @src: char array to copy from
 * @n: number of elements to copy
 *
 * Return: pointer to `dest`
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int count = 0;

	while (count < n)
	{
		dest[count] = src[count];
		count++;
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     479       `
#include "main.h"

/**
 * _strncat - Function that concatenates two strings.
 * @dest: Pointer to destination string to be concatenated.
 * @src: Pointer to source string.
 * @n: Number of bytes to be concatenated.
 *
 * Return: 0 if no error.
 */

char *_strncat(char *dest, char *src, int n)
{
	int len, j;

	len = 0;
	while (dest[len] != '\0')
	{
		len++;
	}

	for (j = 0; j < n && src[j] != '\0'; j++, len++)
	{
		dest[len] = src[j];
	}
	dest[len] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     378       `
#include "main.h"

/**
 * _strchr - Function that locates a character in a string
 * @s: char array string
 * @c: char to look for
 *
 * Return: NULL if char not found, or pointer to first occurrence of char `c`
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		else if (*(s + 1) == c)
			return (s + 1);
		s++;
	}

	return (s + 1);
}
2-strlen.c/     0           0     0     644     241       `
#include "main.h"

/**
 * _strlen - Function that returns the length of a string
 * @s: Variable to hold the string
 *
 * Return: 0 if no error
 */

int _strlen(char *s)
{
	int i;

	i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return (i);
}

2-strncpy.c/    0           0     0     644     517       `
#include "main.h"

/**
 * _strncpy - Function that copies n number of string.
 * @dest: Pointer to the destination where the content is to be copied.
 * @src: The source string to be copied.
 * @n: The number of characters to be copied.
 *
 * Return: *dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int byteCount;

	for (byteCount = 0; byteCount < n && src[byteCount] != '\0'; byteCount++)
		dest[byteCount] = src[byteCount];
	for (; byteCount < n; byteCount++)
		dest[byteCount] = '\0';

	return (dest);
}

3-islower.c/    0           0     0     644     267       `
#include "main.h"

/**
 * _islower - This fuction checks for lowercase character
 *
 * @c: its an ascii character
 *
 * Return: 1 if c is lowercase
 */
int _islower(int c)
{
	if (c >= 'a'  && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

3-puts.c/       0           0     0     644     275       `
#include "main.h"

/**
 * _puts - function that prints a string, followed by a new line,
 * to stdout
 * @str: value of type char
 *
 * Return: 0 if no error
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     368       `
#include "main.h"

/**
 * _strcmp - Function that compares two strings
 * @s1: Pointer to first string to be compared
 * @s2: Pointer to second string to be compare
 *
 * Return: Negative int if s1 < s2, 0 if matching, and positive int if s1 > s
 */

int _strcmp(char *s1, char *s2)
{
	while ((*s1 && s2) && (*s1 == *s2))
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     502       `
#include "main.h"

/**
 * _strspn - Function that gets the length of a prefix substring
 * @s: char string array
 * @accept: char array to check bytes with
 *
 * Return: Number of bytes in the intial segment of `s`
 */

unsigned int _strspn(char *s, char *accept)
{
	int i;
	int j;
	int c;

	i = 0;
	c = 0;

	while (s[i] != '\0')
	{
		j = 0;
		while (accept[j] != '\0')
		{
			if (s[i] == accept[j])
			{
				c++;
				break;
			}
			j++;
		}
		if (accept[j] == '\0')
			break;
		i++;
	}
	return (c);
}
4-isalpha.c/    0           0     0     644     307       `
#include "main.h"

/**
 * _isalpha - This function checks for alphabetic character
 * @c: Its an ascii value
 *
 * Return: 1 if no error
 */
int _isalpha(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

4-strpbrk.c/    0           0     0     644     451       `
#include "main.h"

/**
 * _strpbrk - Function that searches a string for any of a set of bytes
 * @s: The string to be searched.
 * @accept: The set of bytes to be searched for.
 *
 * Return: a pointer to the matched byte.
 * If no set is matched - NULL.
 */

char *_strpbrk(char *s, char *accept)
{
	int index;

	while (*s)
	{
		for (index = 0; accept[index]; index++)
		{
			if (*s == accept[index])
				return (s);
		}

		s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     617       `
#include "main.h"

/**
 * _strstr - Function that locates a substring
 * @haystack: The string to be searched.
 * @needle: The substring to be located.
 *
 * Return: a pointer to the beginning of the located substring.
 * If the substring is not located - NULL.
 */

char *_strstr(char *haystack, char *needle)
{
	int index;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		index = 0;

		if (haystack[index] == needle[index])
		{
			do {
				if (needle[index + 1] == '\0')
					return (haystack);

				index++;

			} while (haystack[index] == needle[index]);
		}

		haystack++;
	}

	return ('\0');
}

6-abs.c/        0           0     0     644     257       `
#include "main.h"

/**
 * _abs - this program compute the absolute value of a number
 * @n: n is an integer
 *
 * Return: 0 if no error
 */

int _abs(int n)
{
	if (n > 0)
	{
		return (n);
	}
	else if (n < 0)
	{
		return (-n);
	}
	else
	{
		return (n);
	}
}

9-strcpy.c/     0           0     0     644     476       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 *
 * Return: the pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int len, i;

	len = 0;

	while (src[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

